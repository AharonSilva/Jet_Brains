type: edu
custom_name: stage2
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CreditCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    stdin='1000\nm\n200',
                    attach=(5, 'months'),
                ),
                TestCase(
                    stdin='1000\nm\n150',
                    attach=(7, 'months'),
                ),
                TestCase(
                    stdin='1000\nm\n1000',
                    attach=(1, 'month'),
                ),
                TestCase(
                    stdin='1000\np\n10',
                    attach=100,
                ),
                TestCase(
                    stdin='1000\np\n9',
                    attach=['112', '104'],
                ),
            ]

        def check(self, reply, attach):

            if isinstance(attach, tuple):
                a, b = attach
                if a == 1:
                    if '1 months' in reply:
                        output = '{0} should be in the output, but you output {1}'
                        return CheckResult.wrong(
                            output.format('1 month', reply),
                        )

                if str(a) not in reply or b not in reply:
                    output = (
                        '"{0} {1}" should be in the output, but you output {2}'
                    )
                    return CheckResult.wrong(
                        output.format(a, b, reply),
                    )

            elif isinstance(attach, list):
                if attach[0] not in reply or attach[1] not in reply:
                    numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
                    if len(numbers) == 0:
                        output = (
                            'Correct monthly payment is {0} and last payment is'
                            ' {1}, but there are no any numbers in your output'
                            .format(attach[0], attach[1])
                        )
                    elif len(numbers) == 1:
                        output = (
                            'Correct monthly payment is {0} and last payment is'
                            ' {1}, but there are only {2} in your output'
                            .format(attach[0], attach[1], numbers[0])
                        )
                    else:
                        output = (
                            'Correct monthly payment is {0} and last payment is'
                            ' {1}, but there are only {2} {3} in your output'
                            .format(attach[0], attach[1], numbers[0], numbers[1])
                        )
                    return CheckResult.wrong(output)
            else:
                if str(attach) not in reply:
                    output = (
                        'Correct monthly payment is {0}. But your output is {1}'
                    )
                    return CheckResult.wrong(
                        output.format(attach, reply),
                    )

            return CheckResult.correct()


    if __name__ == '__main__':
        CreditCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
- name: creditcalc/creditcalc.py
  visible: true
  text: |
    import math


    class Calculator:
        def __init__(self, credit=int(input('Enter the credit principal:\n'))):
            self.credit = credit

        def get_months(self, m_pay):
            months = self.credit / m_pay
            return math.ceil(months)

        def get_monthly_payment(self, months):
            m_pay = self.credit / months
            last_pay = 0
            if m_pay != int(m_pay):
                m_pay = math.ceil(m_pay)
                last_pay = self.credit - (months - 1) * m_pay
            return m_pay, last_pay

        def select_option(self):
            option = input('What do you want to calculate?\n'
                           'type "m" - for count of months,\n'
                           'type "p" - for monthly payment:\n')
            if option == 'm':
                m = int(input('Enter monthly payment:\n'))
                x_months = self.get_months(m)
                if x_months > 1:
                    print(f'It takes {x_months} months to repay the credit')
                else:
                    print(f'It takes {x_months} month to repay the credit')
            elif option == 'p':
                p = int(input('Enter count of months:\n'))
                x_pays, y_pays = self.get_monthly_payment(p)
                if y_pays != 0:
                    print(f'Your monthly payment = {x_pays} with last month payment = {y_pays}.')
                else:
                    print(f'Your monthly payment = {int(x_pays)}')


    def main():
        Calculator().select_option()


    if __name__ == '__main__':
        main()
  learner_created: true
feedback_link: https://hyperskill.org/projects/90/stages/501/implement
status: Solved
record: 2
